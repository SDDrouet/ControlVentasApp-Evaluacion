services:
  inventario:
    build:
      context: ./inventario
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - DB_HOST=postgres_inventario
      - DB_NAME=inventario_db
      - DB_USER=postgres
      - DB_PASS=postgres
      - PORT=3001
      - DB_PORT=5432
    networks:
      - ventas-network
    depends_on:
      postgres_inventario:
        condition: service_healthy

  postgres_inventario:
    image: postgres:14-alpine
    ports:
      - 5437:5432
    environment:
      - POSTGRES_DB=inventario_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata_inventario:/var/lib/postgresql/data
    networks:
      - ventas-network



  clientes_api:
    build:
      context: ./clientes
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - DB_HOST=postgres_clientes
      - DB_NAME=postgres
      - DB_USER=postgres
      - DB_PASS=postgres
      - PORT=3002
      - DB_PORT=5432
    networks:
      - ventas-network
    depends_on:
      postgres_clientes:
        condition: service_healthy

  postgres_clientes:
    image: postgres:14-alpine
    ports:
      - 5438:5432
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata_clientes:/var/lib/postgresql/data
    networks:
      - ventas-network

  

  ventas:
    build:
      context: ./ventas
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    environment:
      - DB_HOST=postgres_ventas
      - DB_NAME=postgres
      - DB_USER=postgres
      - DB_PASS=postgres
      - PORT=3003
      - DB_PORT=5432
      - API_INVENTARIO_HOST=inventario
      - API_CLIENTES_HOST=clientes_api
    networks:
      - ventas-network
    depends_on:
      inventario:
        condition: service_started
      clientes_api:
        condition: service_started
      postgres_ventas:
        condition: service_healthy

  postgres_ventas:
    image: postgres:14-alpine
    ports:
      - 5439:5432
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata_ventas:/var/lib/postgresql/data
    networks:
      - ventas-network


  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_INVENTARIO_HOST=localhost
      - REACT_APP_CLIENTE_HOST=localhost
      - REACT_APP_VENTAS_HOST=localhost
    networks:
      - ventas-network
    depends_on:
      ventas:
        condition: service_started

volumes:
  pgdata_clientes:
  pgdata_inventario:
  pgdata_ventas:


networks:
  ventas-network:
    driver: bridge

